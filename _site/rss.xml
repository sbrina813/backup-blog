<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <!--[if lte IE 9]><meta http-equiv="refresh" content="0;url=/ie.html"><![endif]-->

    <title></title>
    <meta name="description" content="">

    <link rel="stylesheet" type="text/css" href="/assets/css/style.css">
    <link rel="stylesheet" href="/prettify/prettify.css">
  </head>
  <body>
    <aside id="sidebar">
      <nav id="tags">
        <a href="/index.html" id="avatar"></a>

        <ul id="tags__ul">
          <li id="js-label1" class="tags__li tags-btn active">All Posts</li>
          <li id="js-label2" class="tags__li tags-btn">Front End</li>
          <li id="js-label3" class="tags__li tags-btn">Back End</li>
          <li id="js-label4" class="tags__li tags-btn">JavaScript</li>
          <li id="js-label5" class="tags__li tags-btn">Notes</li>
          <li id="js-label6" class="tags__li tags-btn">Interests</li>
        </ul>

        <div id="tags__bottom">
          <a href="mailto:sabrina.jiang813@gmail.com" id="icon-email" class="tags-btn fontello"></a>
          <a href="/rss.xml" id="icon-feed" class="tags-btn fontello"></a>
        </div>
      </nav> <!-- end #tags -->

      <div id="posts-list">
        <form action="" id="search-form">
          <!-- NOTE: input field is disabled by default -->
          <input id="search-input" type="text" placeholder="Search...">
          <ul id="results-container"></ul>
        </form>

        <nav id="pl__container">
        
          <a class="javascript pl__all" href="/javascript/2015/09/09/MVC-AngularJS.html"><span class="pl__circle"></span><span class="pl__title">SPA and MVC in AngularJS</span><span class="pl__date">Sep 2015</span></a>
        
          <a class="javascript pl__all" href="/javascript/2015/09/08/this-in-javascript.html"><span class="pl__circle"></span><span class="pl__title">this in JavaScript</span><span class="pl__date">Sep 2015</span></a>
        
          <a class="javascript pl__all" href="/javascript/2015/09/08/Bind-apply-call-in-JavaScript.html"><span class="pl__circle"></span><span class="pl__title">Bind, call and Apply in JavaScript</span><span class="pl__date">Sep 2015</span></a>
        
          <a class="javascript pl__all" href="/javascript/2015/09/07/OOP-in-JavaScript.html"><span class="pl__circle"></span><span class="pl__title">Object Oriented Programming (OOP)</span><span class="pl__date">Sep 2015</span></a>
        
          <a class="javascript pl__all" href="/javascript/2015/09/07/JavaScript-Prototype.html"><span class="pl__circle"></span><span class="pl__title">JavaScript Prototype</span><span class="pl__date">Sep 2015</span></a>
        
          <a class="javascript pl__all" href="/javascript/2015/09/06/Variable-Scope-n-Hoisting.html"><span class="pl__circle"></span><span class="pl__title">JavaScript Variable Scope and Hoisting</span><span class="pl__date">Sep 2015</span></a>
        
          <a class="javascript pl__all" href="/javascript/2015/09/06/Closure.html"><span class="pl__circle"></span><span class="pl__title">JavaScript Closure</span><span class="pl__date">Sep 2015</span></a>
        
          <a class="javascript pl__all" href="/javascript/2015/09/04/callback.html"><span class="pl__circle"></span><span class="pl__title">Understand JavaScript Callback Functions and Use Them</span><span class="pl__date">Sep 2015</span></a>
        
          <a class="front_end pl__all" href="/front_end/2015/08/04/interview-notes.html"><span class="pl__circle"></span><span class="pl__title">HTML5 material</span><span class="pl__date">Aug 2015</span></a>
        
          <a class="interests pl__all" href="/interests/2015/07/10/first-blog.html"><span class="pl__circle"></span><span class="pl__title">Aha, this is my first blog</span><span class="pl__date">Jul 2015</span></a>
        
        </nav>
      </div> <!-- end #posts-list -->
    </aside> <!-- end #sidebar -->

    <div id="post">
      <div id="pjax">
        <?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sabrina Jiang's Blog</title>
    <link>http://sbrina813.github.io/</link>
    <atom:link href="http://sbrina813.github.io/rss.xml" rel="self" type="application/rss+xml" />
    <description>Just learn whatever it takes to make it work. I use this blog to accumulate.
</description>
    <language>en-us</language>
    <pubDate>Fri, 11 Sep 2015 16:38:47 -0700</pubDate>
    <lastBuildDate>Fri, 11 Sep 2015 16:38:47 -0700</lastBuildDate>

    
    <item>
      <title>SPA and MVC in AngularJS</title>
      <link>http://sbrina813.github.io//javascript/2015/09/09/MVC-AngularJS.html</link>
      <pubDate>09 Sep 2015</pubDate>
      <author>Sabrina Jiang</author>
      <guid>http://sbrina813.github.io//javascript/2015/09/09/MVC-AngularJS</guid>
      <description>&lt;p&gt;Extract from the book of Pro AngularJS—Adam Freeman&lt;/p&gt;

&lt;h4 id=&quot;round-trip-app-vs-single-page-app&quot;&gt;Round-Trip App vs Single Page App&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Round-trip App&lt;/strong&gt;:The browser requests an initial HTML document from the server. User interactions-such as clicking a link or submitting a form-led the browser to request and receive a completely new HTML document. In this kind of application, the browser is essentially a rending engine for HTML content, and all of the applicaation logic and data resides on the server. The browser makes a series of stateless HTTP requests that the server handles by generating HTML documents danamically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serious drawbacks to round-trip apps&lt;/strong&gt; : They make the user wait while the next HTML document is requested and roaded, they require a large server-side infrastructure to process all of the requests and manage all of the application state, and they require a lot of bandwidth because each HTML document has to be self-contained(a lot of same content-like header, footer- being included in each response from the server)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Single page application(SPA)&lt;/strong&gt;: An initial HTML document is sent to the browser, but user interactions lead to Ajax requests for small fragments of HTML or data inserted into the existing set of elements being displayed to the user. The initial HTML document is never be reloaded or replaced, and the user can continue to interact with the existing HTML while the Ajax requests are being performed asychronously, even if that just means seeing a “data loading” message.
Ther is gradual tendency for current web app projects to move toward the single page application model, because the benefits of using the MVC pattern really start to manifest themselves in larger and more complex projects.&lt;/p&gt;

&lt;h4 id=&quot;understanding-the-mvc-pattern&quot;&gt;Understanding the MVC Pattern&lt;/h4&gt;
&lt;p&gt;The key to applying the MVC pattern is to implement the key premise of a &lt;em&gt;separation of concerns&lt;/em&gt;, in which the data model in the application is decoupled from the business and presentation logic. In the client-side web development, &lt;strong&gt;this means separating the data, the logic that oprates on that data, and the HTML elements used to display the data.&lt;/strong&gt; The result is a client-side application that is easier to develop,maintain and test.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Models&lt;/strong&gt;—the M in MVC,contains the data that users work with. There are two broad types of model. &lt;strong&gt;view models&lt;/strong&gt;, which represent just data passed from the controller to the view, and &lt;strong&gt;domian models&lt;/strong&gt;, which contain the data in a business domain, along with the operations, transformation, and rules for creating, storing and manipulating that data, collectively referred to as the model logic.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A model should:&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Contain domain data&lt;/li&gt;
    &lt;li&gt;Contain the logic for creating,managing and modifying the domain data&lt;/li&gt;
    &lt;li&gt;Provide a clean API that exposes the model data and operations on it&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;should not:&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Expose details of how the model data is obtained or managed( in other words, details of the data storage mechanism or the remote web
service should not be exposed to controllers and views)&lt;/li&gt;
    &lt;li&gt;Contain logic that transforms the model based on user interaction( because this is the controller’s job)&lt;/li&gt;
    &lt;li&gt;Contain logic for displaying to the user( this is the view’s job)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Controllers&lt;/strong&gt; are the connective tissue in an AngularJS web application, acting as conduits between the data model and views. Controllers add business logic(known as behavior) to scopes, which are subsets of the model.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A controller should:&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Contain the logic required to initialize the scope&lt;/li&gt;
    &lt;li&gt;Contain the logic/behaviors required by the view to present data from the scope&lt;/li&gt;
    &lt;li&gt;Contain the logic/behaviors required to update the scope based on the user interaction&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;Should not:&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Contain logic that manipulates the DOM (that is the job of the view)&lt;/li&gt;
    &lt;li&gt;Contain logic that manages the persistence of data (that is the job of the model)&lt;/li&gt;
    &lt;li&gt;Manipulate data outside of the scope&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Views&lt;/strong&gt; are defined using HTML elements that are enhanced and that generate HTML by the use of data bindings and directives. It is the AngularJS directives that make views so flexible, and they transform HTML elements into the foundation for dynamic web apps.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Virws should:&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;Contain the logic and markup required to present data to the user&lt;br /&gt;
&lt;strong&gt;Should not:&lt;/strong&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;Contain complex logic （this is better placed in a controller)&lt;/li&gt;
    &lt;li&gt;Contain logic that creates, stores or manipulates the domain model&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>this in JavaScript</title>
      <link>http://sbrina813.github.io//javascript/2015/09/08/this-in-javascript.html</link>
      <pubDate>08 Sep 2015</pubDate>
      <author>Sabrina Jiang</author>
      <guid>http://sbrina813.github.io//javascript/2015/09/08/this-in-javascript</guid>
      <description>&lt;p&gt;&lt;a href=&quot;http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/&quot;&gt;Extrct form JavaScriptissexy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that when we use &lt;code&gt;strict mode&lt;/code&gt;, this holds the value of undefined in global functions and in anonymous functions that are not bound to any object.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Even though it appears &lt;em&gt;this&lt;/em&gt; refers to the object where it is
defined, it is not until an object invokes the this Function that
&lt;em&gt;this&lt;/em&gt; is actually assigned a value. And the value it is assigned is based exclusively on the object that invokes the this Function. &lt;em&gt;this&lt;/em&gt;
has the value of the invoking object in most circumstances. However,
there are a few scenarios where &lt;em&gt;this&lt;/em&gt; does not have the value of the
invoking object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The use of &lt;em&gt;this&lt;/em&gt; in the global scope&lt;/strong&gt;
when we use &lt;em&gt;this&lt;/em&gt; in a global function, it refers to (and has the value of) the global window object (not in strict mode though, as noted earlier) that is the main container of the entire JavaScript application or web page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When &lt;em&gt;this&lt;/em&gt; is most misunderstood and becomes tricky&lt;/strong&gt;
The this keyword is most misunderstood when we borrow a method that uses &lt;em&gt;this&lt;/em&gt;, when we assign a method that uses this to a variable, when a function that uses &lt;em&gt;this&lt;/em&gt; is &lt;code&gt;passed as a callback function&lt;/code&gt;, and when this is used inside a closure—an inner function.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/&quot;&gt;&lt;strong&gt;4 Examples need to digest for future use&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Always remember that &lt;em&gt;this&lt;/em&gt; is assigned the value of the object that invoked the this Function.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bind, call and Apply in JavaScript</title>
      <link>http://sbrina813.github.io//javascript/2015/09/08/Bind-apply-call-in-JavaScript.html</link>
      <pubDate>08 Sep 2015</pubDate>
      <author>Sabrina Jiang</author>
      <guid>http://sbrina813.github.io//javascript/2015/09/08/Bind-apply-call-in-JavaScript</guid>
      <description>&lt;p&gt;&lt;a href=&quot;http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/&quot;&gt;Extrct form JavaScriptissexy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript’s Bind Allows Us to Set the this Value on Methods 
&lt;strong&gt;bind ()&lt;/strong&gt; allows us to easily set which specific object will be bound to this when a function or method is invoked.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//            &amp;lt;button&amp;gt;Get Random Person&amp;lt;/button&amp;gt;​
​//        &amp;lt;input type=&quot;text&quot;&amp;gt;​
​
​
​var user = {
    data        :[
        {name:&quot;T. Woods&quot;, age:37},
        {name:&quot;P. Mickelson&quot;, age:43}
    ],
    clickHandler:function (event) {
        var randomNum = ((Math.random () * 2 | 0) + 1) - 1; // random number between 0 and 1​
​
        // This line is adding a random person from the data array to the text field​
        $ (&quot;input&quot;).val (this.data[randomNum].name + &quot; &quot; + this.data[randomNum].age);
    }
​
}
​
​// Assign an eventHandler to the button&#39;s click event​
$ (&quot;button&quot;).click (user.clickHandler); When you click the button, you get an error because this in the clickHandler () method is bound to the button HTML element, since that is the object that the clickHandler method is executed on. To fix this problem, we could bind 

$ (&quot;button&quot;).click (user.clickHandler.bind (user)); use this

  // This data variable is a global variable​
            var data = [
                {name:&quot;Samantha&quot;, age:12},
                {name:&quot;Alexis&quot;, age:14}
            ]
​
            var user = {
                // local data variable​
                data    :[
                    {name:&quot;T. Woods&quot;, age:37},
                    {name:&quot;P. Mickelson&quot;, age:43}
                ],
                showData:function (event) {
                    var randomNum = ((Math.random () * 2 | 0) + 1) - 1; // random number between 0 and 1​
​
                    console.log (this.data[randomNum].name + &quot; &quot; + this.data[randomNum].age);
                }
​
            }
​
            // Assign the showData method of the user object to a variable​
            var showDataVar = user.showData;
​
            showDataVar (); // Samantha 12 (from the global data array, not from the local data array)​ we can fix this problem by specifically setting the “this” value with the bind method:

            // Bind the showData method to the user object​
            var showDataVar = user.showData.bind (user);
​
            // Now the we get the value from the user object because the this keyword is bound to the user object​
            showDataVar (); // P. Mickelson 43​
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Bind () Allows us to Borrow Methods&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       // Here we have a cars object that does not have a method to print its data to the console​
            var cars = {
                data:[
                    {name:&quot;Honda Accord&quot;, age:14},
                    {name:&quot;Tesla Model S&quot;, age:2}
                ]
​
            }
​
            // We can borrow the showData () method from the user object we defined in the last example.​
            // Here we bind the user.showData method to the cars object we just created.​
            cars.showData = user.showData.bind (cars);
            cars.showData (); // Honda Accord 14​ it is best to borrow a method using either the Apply or Call method.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;JavaScript’s Bind Allows Us to Curry a Function&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Function Currying&lt;/strong&gt;, also known as partial function application, is the use of a function (that accept one or more arguments) that returns a new function with some of the arguments already set. The function that is returned has access to the stored arguments and variables of the outer function. 
Let’s use the bind () method for currying.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function greet (gender, age, name) {
    // if a male, use Mr., else use Ms.​
    var salutation = gender === &quot;male&quot; ? &quot;Mr. &quot; : &quot;Ms. &quot;;

    if (age &amp;gt; 25) {
        return &quot;Hello, &quot; + salutation + name + &quot;.&quot;;
    }
    else {
        return &quot;Hey, &quot; + name + &quot;.&quot;;
    }
}
// So we are passing null because we are not using the &quot;this&quot; keyword in our greet function.​
var greetAnAdultMale = greet.bind (null, &quot;male&quot;, 45);

greetAnAdultMale (&quot;John Hartlove&quot;); // &quot;Hello, Mr. John Hartlove.&quot;​

var greetAYoungster = greet.bind (null, &quot;&quot;, 16);
greetAYoungster (&quot;Alex&quot;); // &quot;Hey, Alex.&quot;​
greetAYoungster (&quot;Emma Waterloo&quot;); // &quot;Hey, Emma Waterloo.&quot;​
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, with the bind () method, we can explicitly set the this value for invoking methods on objects, we can borrow and copy methods, and assign methods to variable to be executed as functions.&lt;/p&gt;

&lt;h4 id=&quot;javascripts-apply-and-call-methods&quot;&gt;JavaScript’s Apply and Call Methods&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;Apply and Call&lt;/strong&gt; methods are two of the most often used Function methods in JavaScript, and for good reason: they allow us to borrow functions and set the this value in function invocation. In addition, the apply function in particular allows us to execute a function with an array of parameters, such that each parameter is passed to the function individually when the function executes—great for variadic functions; a variadic function takes varying number of arguments, not a set number of arguments as most functions do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set the this value with Apply or Call&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// global variable for demonstration​
var avgScore = &quot;global avgScore&quot;;
​
//global function​
function avg (arrayOfScores) {
    // Add all the scores and return the total​
    var sumOfScores = arrayOfScores.reduce (function (prev, cur, index, array) {
        return prev + cur;
    });
​
    // The &quot;this&quot; keyword here will be bound to the global object, unless we set the &quot;this&quot; with Call or Apply​
    this.avgScore = sumOfScores / arrayOfScores.length;
}
​
var gameController = {
    scores  :[20, 34, 55, 46, 77],
    avgScore:null​
}
​
// If we execute the avg function thus, &quot;this&quot; inside the function is bound to the global window object:​
avg (gameController.scores);
// Proof that the avgScore was set on the global window object​
console.log (window.avgScore); // 46.4​
console.log (gameController.avgScore); // null​
​
// reset the global avgScore​
avgScore = &quot;global avgScore&quot;;
​
// To set the &quot;this&quot; value explicitly, so that &quot;this&quot; is bound to the gameController,​
// We use the call () method:​
avg.call (gameController, gameController.scores);
​
console.log (window.avgScore); //global avgScore​
console.log (gameController.avgScore); // 46.4​ The apply and call methods are almost identical when setting the this value except that you pass the function parameters to apply () as an array, while you have to list the parameters individually to pass them to the call () method. More on this follows. Meanwhile, the apply () method also has another feature that the call () method doesn’t have, as we will soon see.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Use Call or Apply To Set this in Callback Functions&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Define an object with some properties and a method​
// We will later pass the method as a callback function to another function​
var clientData = {
id: 094545,
fullName: &quot;Not Set&quot;,
// setUserName is a method on the clientData object​
setUserName: function (firstName, lastName)  {
// this refers to the fullName property in this object​
this.fullName = firstName + &quot; &quot; + lastName;
}
}

function getUserInput (firstName, lastName, callback, callbackObj) {
// The use of the Apply method below will set the &quot;this&quot; value to callbackObj​
callback.apply (callbackObj, [firstName, lastName]);
} The Apply method sets the this value to callbackObj. This allows us to execute the callback function with the this value set explicitly, so the parameters passed to the callback function will be set on the clientData object:

// The clientData object will be used by the Apply method to set the &quot;this&quot; value​
getUserInput (&quot;Barack&quot;, &quot;Obama&quot;, clientData.setUserName, clientData);
// the fullName property on the clientData was correctly set​
console.log (clientData.fullName); // Barack Obama​
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/&quot;&gt;Examples&lt;/a&gt; of &lt;strong&gt;Borrowing Functions with Apply and Call (A Must Know)&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Object Oriented Programming (OOP)</title>
      <link>http://sbrina813.github.io//javascript/2015/09/07/OOP-in-JavaScript.html</link>
      <pubDate>07 Sep 2015</pubDate>
      <author>Sabrina Jiang</author>
      <guid>http://sbrina813.github.io//javascript/2015/09/07/OOP-in-JavaScript</guid>
      <description>&lt;p&gt;&lt;a href=&quot;http://javascriptissexy.com/oop-in-javascript-what-you-need-to-know/&quot;&gt;Extrct form JavaScriptissexy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Object Oriented Programming (OOP)&lt;/strong&gt; refers to using self-contained pieces of code to develop applications. We call these self-contained pieces of code objects, better known as Classes in most OOP programming languages and Functions in JavaScript.
Building applications with objects allows us to adopt some valuable techniques, namely, &lt;strong&gt;Inheritance&lt;/strong&gt; (objects can inherit features from other objects), &lt;strong&gt;Polymorphism&lt;/strong&gt; (objects can share the same interface—how they are accessed and used—while their underlying implementation of the interface may differ), and &lt;strong&gt;Encapsulation&lt;/strong&gt; (each object is responsible for specific tasks).
In this article, we are concerned with only &lt;strong&gt;Inheritance and Encapsulation&lt;/strong&gt; &lt;strong&gt;since only these two concepts apply to OOP in JavaScript&lt;/strong&gt;, particularly because, in JavaScript, objects can encapsulate functionalities and inherit methods and properties from other objects.These two techniques: the best technique for creating objects with specialized functionalities (aka Encapsulation) and the best technique for reusing code (aka Inheritance).&lt;/p&gt;

&lt;h3 id=&quot;encapsulation-and-inheritance-overview&quot;&gt;Encapsulation and Inheritance Overview&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Objects&lt;/strong&gt; can be thought of as the main actors in an application, or simply the main “things” or building blocks that do all the work. As you know by now, objects are everywhere in JavaScript since every component in JavaScript is an Object, including Functions, Strings, and Numbers. We normally use object literals or constructor functions to create objects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Encapsulation&lt;/strong&gt; refers to enclosing all the functionalities of an object within that object so that the object’s internal workings (its methods and properties) are hidden from the rest of the application. This allows us to abstract or localize specific set of functionalities on objects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inheritance&lt;/strong&gt; refers to an object being able to inherit methods and properties from a parent object (a Class in other OOP languages, or a Function in JavaScript).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Both of these concepts, encapsulation and inheritance, are important because they allow us to build applications with reusable code, scalable architecture, and abstracted functionalities. Maintainable, scalable, efficient.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;oop-in-javascript&quot;&gt;OOP in JavaScript&lt;/h3&gt;
&lt;p&gt;The two important principles with OOP in JavaScript are &lt;strong&gt;Object Creation patterns (Encapsulation) and Code Reuse patterns (Inheritance)&lt;/strong&gt;. When building applications, you create many objects, and there exist many ways for creating these objects: you can use the ubiquitous object literal pattern,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myObj = {name: &quot;Richard&quot;, profession: &quot;Developer&quot;}; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the prototype pattern, adding each method and property directly on the object’s prototype.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Employee () {}
​
Employee.prototype.firstName = &quot;Abhijit&quot;;
Employee.prototype.lastName = &quot;Patel&quot;;
Employee.prototype.startDate = new Date();
Employee.prototype.signedNDA = true;
Employee.prototype.fullName = function () {
console.log (this.firstName + &quot; &quot; + this.lastName); 
};
​
​var abhijit = new Employee () //​
console.log(abhijit.fullName()); // Abhijit Patel​
console.log(abhijit.signedNDA); // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the constructor pattern, a constructor function (Classes in other languages, but Functions in JavaScript).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Employee (name, profession) {
​this.name = name;
​this.profession = profession;
} // Employee () is the constructor function because we use the &amp;lt;em&amp;gt;new&amp;lt;/em&amp;gt; keyword below to invoke it.​
​
​var richard = new Employee (“Richard”, “Developer”) // richard is a new object we create from the Employee () constructor function.​
​
console.log(richard.name); //richard​
console.log(richard.profession); // Developer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two universal principles—&lt;strong&gt;creating objects&lt;/strong&gt; (especially from constructor Functions) and &lt;strong&gt;allowing objects to inherit properties and methods&lt;/strong&gt;—are the main focus of this article and, indeed, &lt;strong&gt;the main concepts with OOP in JavaScript.&lt;/strong&gt; We first discuss the object creation pattern.&lt;/p&gt;

&lt;h3 id=&quot;encapsulation-in-javascript&quot;&gt;Encapsulation in JavaScript&lt;/h3&gt;
&lt;p&gt;#####(The Best Object Creation Pattern: Combination Constructor/Prototype Pattern)&lt;/p&gt;

&lt;p&gt;As discussed above, one of the main principles &lt;strong&gt;with OOP is encapsulation&lt;/strong&gt;: put all the inner workings of an object inside that object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Encapsulation?&lt;/strong&gt;
whenever you want to create objects with similar functionalities (to use the same methods and properties), you encapsulate the main functionalities in a Function and you use that Function’s constructor to create the objects. This is the &lt;code&gt;essence&lt;/code&gt; of encapsulation.
&lt;strong&gt;Implementation of Combination Constructor/Prototype Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function User (theName, theEmail) {
    this.name = theName;
    this.email = theEmail;
    this.quizScores = [];
    this.currentScore = 0;
}
​
User.prototype = {
    constructor: User, //have to set manually,since constructor property changes 
    saveScore:function (theScoreToAdd)  {
        this.quizScores.push(theScoreToAdd)
    },
    showNameAndScores:function ()  {
        var scores = this.quizScores.length &amp;gt; 0 ? this.quizScores.join(&quot;,&quot;) : &quot;No Scores Yet&quot;;
        return this.name + &quot; Scores: &quot; + scores;
    },
    changeEmail:function (newEmail)  {
        this.email = newEmail;
        return &quot;New Email Saved: &quot; + this.email;
    }
}

// A User ​
firstUser = new User(&quot;Richard&quot;, &quot;Richard@examnple.com&quot;); 
firstUser.changeEmail(&quot;RichardB@examnple.com&quot;);
firstUser.saveScore(15);
firstUser.saveScore(10); 
​
firstUser.showNameAndScores(); //Richard Scores: 15,10​
​
​// Another User​
secondUser = new User(&quot;Peter&quot;, &quot;Peter@examnple.com&quot;);
secondUser.saveScore(18);
secondUser.showNameAndScores(); //Peter Scores: 18
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;The one &lt;strong&gt;disadvantage&lt;/strong&gt; of overwriting the prototype is that the constructor property no longer points to the prototype, so we have to set it manually. Hence this line:&lt;/em&gt;
With this pattern, you can use the standard operators and methods on the instances, including the instanceOf operator, the for-in loop (even hasOwnProperty), and the constructor property.&lt;/p&gt;

&lt;h3 id=&quot;inheritance-in-javascript&quot;&gt;Inheritance in JavaScript&lt;/h3&gt;
&lt;p&gt;#####(The Best Pattern: Parasitic Combination Inheritance)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Object.create method&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Object.create = function (o) {
​//It creates a temporary constructor F()​
        function F() {
        }
​//And set the prototype of the this constructor to the parametric (passed-in) o object​
​//so that the F() constructor now inherits all the properties and methods of o​
        F.prototype = o;
​
​//Then it returns a new, empty object (an instance of F())​
​//Note that this instance of F inherits from the passed-in (parametric object) o object. ​
​//Or you can say it copied all of the o object&#39;s properties and methods​
        return new F();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The crux of the matter with this Object.create method is that you pass into it an object that you want to inherit from, and it returns a new object that inherits from the object you passed into it. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// We have a simple cars object​
​var cars = {
    type:&quot;sedan&quot;,
    wheels:4​
};
​
​// We want to inherit from the cars object, so we do:​
​var toyota = Object.create (cars); // now toyota inherits the properties from cars​
console.log(toyota.type); // sedan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next function we will use for inheritance is the &lt;strong&gt;inheritPrototype&lt;/strong&gt; function. &lt;strong&gt;This function succinctly implements the parasitic combination inheritance for us.&lt;/strong&gt; We pass in the parent object (or Super Class) and the child object (or Sub Class), and the function does the parasitic combination inheritance: makes the child object inherits from the parent object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; function inheritPrototype(childObject, parentObject) {
    // As discussed above, we use the Crockford’s method to copy the properties and methods from the parentObject onto the childObject​
​// So the copyOfParent object now has everything the parentObject has ​
    var copyOfParent = Object.create(parentObject.prototype);
​
    //Then we set the constructor of this new object to point to the childObject.​
​// Why do we manually set the copyOfParent constructor here, see the explanation immediately following this code block.​
    copyOfParent.constructor = childObject;
​
    // Then we set the childObject prototype to copyOfParent, so that the childObject can in turn inherit everything from copyOfParent (from parentObject)​
   childObject.prototype = copyOfParent;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&quot;why-did-we-manually-set-the-copyofparentconstructor&quot;&gt;Why did we manually set the copyOfParent.constructor?&lt;/h6&gt;
&lt;p&gt;We explicitly set the copyOfParent.constructor property to point to the childObject constructor because in the preceding step, var copyOfParent = Object.create(parentObject.prototype), this is what we actually did:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// We made a new object and overwrote its prototype with the parentObject prototype:​
​function F() {
        }
F.prototype = parentObject.prototype;
​// Then it was this new F object we assigned to copyOfParent.​
​// All of this was done inside the Object.create () method.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, this new F object, which we assigned to copyOfParent, doesn’t have a constructor property anymore because we overwrote its entire prototype. &lt;strong&gt;Whenever you overwrite an object’s prototype (object.prototype = someVal), you also overwrite the object’s constructor property.&lt;/strong&gt;
To make sure we have the correct value for copyOfParent constructor, we set it manually with this: &lt;code&gt;copyOfParent.constructor = childObject;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Essentially, we are copying all the properties and methods from the
parentObject to the childObject, but we are &lt;strong&gt;using the copyOfParent as
an intermediary&lt;/strong&gt; for the copy. And because the childObject prototype
was overwritten during the copy, we manually set the copyOfParent
constructor to the childObject. Then we set the childObject prototype
to the copyOfParent so that the childObject inherits from the
parentObject.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Prototype</title>
      <link>http://sbrina813.github.io//javascript/2015/09/07/JavaScript-Prototype.html</link>
      <pubDate>07 Sep 2015</pubDate>
      <author>Sabrina Jiang</author>
      <guid>http://sbrina813.github.io//javascript/2015/09/07/JavaScript-Prototype</guid>
      <description>&lt;p&gt;&lt;a href=&quot;http://javascriptissexy.com/javascript-prototype-in-plain-detailed-language/&quot;&gt;Extract from javascriptissexy&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Every JavaScript function has a prototype property&lt;/strong&gt; (this property is empty by default), and you attach properties and methods on this prototype property when you want to implement inheritance. Firefox and most versions of Safari and Chrome have a &lt;em&gt;proto&lt;/em&gt; “pseudo” property, you should know that it exists and it is simply a way to access an object’s prototype property in some browsers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The second concept with prototype in JavaScript is the &lt;strong&gt;prototype attribute&lt;/strong&gt;.An object’s prototype attribute points to the object’s “parent”—the object it inherited its properties from. &lt;strong&gt;To expound on this:&lt;/strong&gt; Every object inherits properties from some other object, and it is this other object that is the object’s prototype attribute or “parent”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;A constructor is a function used for initializing new objects, and you
use the new keyword to call the constructor.Moreover, all objects that
inherit from another object also inherit a constructor property. And
this constructor property is simply a property (like any variable)
that holds or points to the constructor of the object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;//The constructor in this example is Object ()
var myObj = new Object ();
// And if you later want to find the myObj constructor:
console.log(myObj.constructor); // Object()

// Another example: Account () is the constructor
var userAccount = new Account (); 
// Find the userAccount object&#39;s constructor
console.log(userAccount.constructor); // Account()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Prototype Attribute of Objects Created with new Object () or Object Literal&lt;/strong&gt;
All objects created with object literals and with the Object constructor inherits from Object.prototype. Therefore, Object.prototype is the prototype attribute (or the prototype object) of all objects created with new Object () or with {}. Object.prototype itself does not inherit any methods or properties from any other object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// The userAccount object inherits from Object and as such its prototype attribute is Object.prototype.
var userAccount = new Object ();

// This demonstrates the use of an object literal to create the userAccount object; the userAccount object inherits from Object; therefore, its prototype attribute is Object.prototype just as the userAccount object does above.
var userAccount = {name: “Mike”} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Prototype Attribute of Objects Created With a Constructor Function&lt;/strong&gt;
Objects created with the new keyword and any constructor other than the Object () constructor, get their prototype from the constructor function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Account () {

}
var userAccount = new Account () // userAccount initialized with the Account () constructor and as such its prototype attribute (or prototype object) is Account.prototype.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, any array such as var myArray = new Array (), gets its prototype from Array.prototype and it inherits Array.prototype’s properties.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, there are two general ways an object’s prototype attribute is set when an object is created&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If an object is created with an &lt;code&gt;object literal (var newObj = {})&lt;/code&gt;, it &lt;code&gt;inherits properties from Object.prototype&lt;/code&gt; and we say its prototype object (or prototype attribute) is Object.prototype.&lt;/li&gt;
  &lt;li&gt;If an object is created from a constructor function such as &lt;code&gt;new Object ()&lt;/code&gt;, new Fruit () or new Array () or new Anything (), it &lt;code&gt;inherits from that constructor&lt;/code&gt; (Object (), Fruit (), Array (), or Anything ()). 
&lt;strong&gt;For example&lt;/strong&gt;, with a function such as Fruit (), each time we create a new instance of Fruit (var aFruit = new Fruit ()), the new instance’s prototype is assigned the prototype from the Fruit constructor, which is Fruit.prototype.Any object that was created with new Array () will have Array.prototype as its prototype. An object created with new Fruit () will have Fruit.prototype as its prototype. And any object created with the Object constructor (Obj (), such as var anObj = new Object() ) inherits from Object.prototype.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is important to know that in ECMAScript 5, you can create objects with an Object.create() method that allows you to set the new object’s prototype object.&lt;/p&gt;

&lt;h3 id=&quot;why-is-prototype-important-and-when-is-it-used&quot;&gt;Why is Prototype Important and When is it Used?&lt;/h3&gt;
&lt;p&gt;These are two important ways the prototype is used in JavaScript, as we noted above:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Prototype Property: Prototype-based Inheritance&lt;/strong&gt;
Prototype is important in JavaScript because JavaScript does not have classical inheritance based on Classes (as most object oriented languages do), and therefore all inheritance in JavaScript is made possible through the prototype property. JavaScript has a prototype-based inheritance mechanism.Inheritance is a &lt;code&gt;programming paradigm&lt;/code&gt; where &lt;code&gt;objects&lt;/code&gt; (or Classes in some languages) &lt;code&gt;can inherit properties and methods from other objects&lt;/code&gt; (or Classes). In JavaScript, you implement inheritance with the prototype property. For example, you can create a Fruit function (an object, since all functions in JavaScript are objects) and add properties and methods on the Fruit prototype property, and all instances of the Fruit function will inherit all the Fruit’s properties and methods.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Plant () {
​this.country = &quot;Mexico&quot;;
​this.isOrganic = true;
}
​
​// Add the showNameAndColor method to the Plant prototype property​
Plant.prototype.showNameAndColor =  function () {
console.log(&quot;I am a &quot; + this.name + &quot; and my color is &quot; + this.color);
}
​
​// Add the amIOrganic method to the Plant prototype property​
Plant.prototype.amIOrganic = function () {
​if (this.isOrganic)
console.log(&quot;I am organic, Baby!&quot;);
}
​
​function Fruit (fruitName, fruitColor) {
​this.name = fruitName;
​this.color = fruitColor;
}
​
​// Set the Fruit&#39;s prototype to Plant&#39;s constructor, thus inheriting all of Plant.prototype methods and properties.​
Fruit.prototype = new Plant ();
​
​// Creates a new object, aBanana, with the Fruit constructor​
​var aBanana = new Fruit (&quot;Banana&quot;, &quot;Yellow&quot;);
​
​// Here, aBanana uses the name property from the aBanana object prototype, which is Fruit.prototype:​
console.log(aBanana.name); // Banana​
​
​// Uses the showNameAndColor method from the Fruit object prototype, which is Plant.prototype. The aBanana object inherits all the properties and methods from both the Plant and Fruit functions.​
console.log(aBanana.showNameAndColor()); // I am a Banana and my color is yellow.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Indeed, any object that uses the Fruit () constructor will inherit all the Fruit.prototype properties and methods and all the properties and methods from the Fruit’s prototype, which is Plant.prototype. &lt;strong&gt;This is the principal manner in which inheritance is implemented in JavaScript&lt;/strong&gt; and the integral role the prototype chain has in the process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Prototype Attribute: Accessing Properties on Objects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prototype is also important for accessing properties and methods of objects. The prototype attribute (or prototype object) of any object is the “parent” object where the inherited properties were originally defined.This is loosely analogous to the way you might inherit your surname from your father—he is your “prototype parent.” If we wanted to find out where your surname came from, we would first check to see if you created it yourself; if not, the search will move to your prototype parent to see if you inherited it from him. If it was not created by him, the search continues to his father (your father’s prototype parent).
Similarly, if you want to access a property of an object, the search for the property begins directly on the object. If the JS runtime can’t find the property there, it then looks for the property on the object’s prototype—the object it inherited its properties from.
If the property is not found on the object’s prototype, the search for the property then moves to prototype of the object’s prototype (the father of the object’s father—the grandfather). And this continues until there is no more prototype (no more great-grand father; no more lineage to follow). &lt;strong&gt;This in essence is the prototype chain: the chain from an object’s prototype to its prototype’s prototype and onwards.&lt;/strong&gt; And JavaScript uses this prototype chain to look for properties and methods of an object.
If the property does not exist on any of the object’s prototype in its prototype chain, then the property does not exist and undefined is returned.&lt;/p&gt;

&lt;p&gt;This prototype chain mechanism is essentially the same concept we have discussed above with the prototype-based inheritance, except we are now focusing specifically on how JavaScript accesses object properties and methods via the prototype object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myFriends = {name: &quot;Pete&quot;};

// To find the name property below, the search will begin directly on the myFriends object and will immediately find the name property because we defined the property name on the myFriend object. This could be thought of as a prototype chain with one link.
console.log(myFriends.name);

// In this example, the search for the toString () method will also begin on the myFriends’ object, but because we never created a toString method on the myFriends object, the compiler will then search for it on the myFriends prototype (the object which it inherited its properties from).

// And since all objects created with the object literal inherits from Object.prototype, the toString method will be found on Object.prototype—see important note below for all properties inherited from Object.prototype. 

myFriends.toString ();
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Object.prototype Properties Inherited by all Objects All objects in
JavaScript inherit properties and methods from Object.prototype. These
inherited properties and methods are constructor, hasOwnProperty (),
isPrototypeOf (), propertyIsEnumerable (), toLocaleString (), toString
(), and valueOf (). ECMAScript 5 also adds 4 accessor methods to
Object.prototype.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;function People () {
this.superstar = &quot;Michael Jackson&quot;;
}
// Define &quot;athlete&quot; property on the People prototype so that &quot;athlete&quot; is accessible by all objects that use the People () constructor.
People.prototype.athlete = &quot;Tiger Woods&quot;;

var famousPerson = new People ();
famousPerson.superstar = &quot;Steve Jobs&quot;;

// The search for superstar will first look for the superstar property on the famousPerson object, and since we defined it there, that is the property that will be used. Because we have overwritten the famousPerson’s superstar property with one directly on the famousPerson object, the search will NOT proceed up the prototype chain. 
console.log (famousPerson.superstar); // Steve Jobs

// Note that in ECMAScript 5 you can set a property to read only, and in that case you cannot overwrite it as we just did.

// This will show the property from the famousPerson prototype (People.prototype), since the athlete property was not defined on the famousPerson object itself.​
console.log (famousPerson.athlete); // Tiger Woods

// In this example, the search proceeds up the prototype chain and find the toString method on Object.prototype, from which the Fruit object inherited—all objects ultimately inherits from Object.prototype as we have noted before.
console.log (famousPerson.toString()); // [object Object]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All built-in constructors (Array (), Number (), String (), etc.) were created from the Object constructor, and as such their prototype is Object.prototype.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Variable Scope and Hoisting</title>
      <link>http://sbrina813.github.io//javascript/2015/09/06/Variable-Scope-n-Hoisting.html</link>
      <pubDate>06 Sep 2015</pubDate>
      <author>Sabrina Jiang</author>
      <guid>http://sbrina813.github.io//javascript/2015/09/06/Variable-Scope-n-Hoisting</guid>
      <description>&lt;p&gt;&lt;a href=&quot;http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/&quot;&gt;Extract from javascriptissexy&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;variable-scope&quot;&gt;Variable Scope&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; A variable’s scope is the context in which the variable exists. The scope specifies from where you can access a variable and whether you have access to the variable in that context.
Variables have either a &lt;strong&gt;local scope&lt;/strong&gt; or a &lt;strong&gt;global scope&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Local Variables (Function-level scope)&lt;/strong&gt;
Variables declared within a function are local variables and are only accessible within that function or by functions inside that function.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;No Block-Level Scope&lt;/strong&gt;(variables scoped to surrounding curly brackets) example: variable in function without “var” is to be a global variable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Local Variables Have Priority Over Global Variables in Functions&lt;/strong&gt;
If you declare a global variable and a local variable with the same name, the local variable will have priority when you attempt to use the variable inside a function (local scope)&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  var name = &quot;Paul&quot;;

  function users () {
      // Here, the name variable is local and it takes precedence over the same name variable in the global scope​
  var name = &quot;Jack&quot;;

  // The search for name starts right here inside the function before it attempts to look outside the function in the global scope​
  console.log (name); 
  }

  users (); // Jack
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Global Variables&lt;/strong&gt;
All variables declared outside a function are in the global scope. In the browser, which is what we are concerned with as front-end developers, the global context or scope is the window object (or the entire HTML document).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If a variable is initialized (assigned a value) without first being declared with the var keyword, it is automatically added to the global context and it is thus a global variable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pay attention to i:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (var i = 1; i &amp;lt;= 10; i++) {
	console.log (i); // outputs 1, 2, 3, 4, 5, 6, 7, 8, 9, 10;
};

// The variable i is a global variable and it is accessible in the following function with the last value it was assigned above ​
function aNumber () {
console.log(i);
}

// The variable i in the aNumber function below is the global variable i that was changed in the for loop above. Its last value was 11, set just before the for loop exited:
aNumber ();  // 11
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;setTimeout&lt;/strong&gt; Variables are Executed in the Global Scope
Note that all functions in setTimeout are executed in the global scope. This is a tricky bit; consider this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;// The use of the “this” object inside the setTimeout function refers to the Window object, not to myObj​&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var highValue = 200;
var constantVal = 2;
var myObj = {
	highValue: 20,
	constantVal: 5,
	calculateIt: function () {
 setTimeout (function  () {
	console.log(this.constantVal * this.highValue);
}, 2000);
	}
}

// The &quot;this&quot; object in the setTimeout function used the global highValue and constantVal variables, because the reference to &quot;this&quot; in the setTimeout function refers to the global window object, not to the myObj object as we might expect.​

myObj.calculateIt(); // 400
// This is an important point to remember.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Do not Pollute the Global Scope&lt;/strong&gt;
you have to know that it is important to avoid creating many variables in the global scope, such as this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// These two variables are in the global scope and they shouldn&#39;t be here
var firstName, lastName;

function fullName () {
	console.log (&quot;Full Name: &quot; + firstName + &quot; &quot; + lastName );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the improved code and the proper way to avoid polluting the global scope&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Declare the variables inside the function where they are local variables

function fullName () {
	var firstName = &quot;Michael&quot;, lastName = &quot;Jackson&quot;;

	console.log (&quot;Full Name: &quot; + firstName + &quot; &quot; + lastName );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Variable Hoisting&lt;/strong&gt;
&lt;em&gt;All variable declarations are hoisted (lifted and declared) to the top of the function&lt;/em&gt;, if defined in a function, or the top of the global context, if outside a function.&lt;/p&gt;

&lt;p&gt;It is important to know that only variable declarations are hoisted to the top, &lt;strong&gt;not variable initialization or assignments&lt;/strong&gt; (when the variable is assigned a value).&lt;/p&gt;

&lt;p&gt;Variable Hoisting Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function showName () {
console.log (&quot;First Name: &quot; + name);
var name = &quot;Ford&quot;;
console.log (&quot;Last Name: &quot; + name);
}

showName (); 
// First Name: undefined
// Last Name: Ford

// The reason undefined prints first is because the local variable name was hoisted to the top of the function​
// Which means it is this local variable that get calls the first time.
// This is how the code is actually processed by the JavaScript engine:

function showName () {
	var name; // name is hoisted (note that is undefined at this point, since the assignment happens below)
console.log (&quot;First Name: &quot; + name); // First Name: undefined

name = &quot;Ford&quot;; // name is assigned a value

// now name is Ford
console.log (&quot;Last Name: &quot; + name); // Last Name: Ford
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Function Declaration Overrides Variable Declaration When Hoisted&lt;/strong&gt;
&lt;code&gt;Both function declaration and variable declarations are hoisted to the top of the containing scope.&lt;/code&gt; And &lt;code&gt;function declaration takes precedence over variable declarations (but not over variable assignment).&lt;/code&gt; As is noted above, variable assignment is not hoisted, and neither is function assignment. As a reminder, this is a function assignment: var myFunction = function () {}.
Here is a basic example to demonstrate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Both the variable and the function are named myName
var myName;
function myName () {
console.log (&quot;Rich&quot;);
}

// The function declaration overrides the variable name
console.log(typeof myName); // function ------
 // But in this example, the variable assignment overrides the function declaration
var myName = &quot;Richard&quot;; // This is the variable assignment (initialization) that overrides the function declaration.

function myName () {
console.log (&quot;Rich&quot;);
}

console.log(typeof myName); // string 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is important to note that &lt;code&gt;function expressions&lt;/code&gt;, such as the example below, &lt;code&gt;are not hoisted&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myName = function () {
console.log (&quot;Rich&quot;);
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;strict mode&lt;/code&gt;, an error will occur if you assign a variable a value without first declaring the variable. Always declare your variables.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Closure</title>
      <link>http://sbrina813.github.io//javascript/2015/09/06/Closure.html</link>
      <pubDate>06 Sep 2015</pubDate>
      <author>Sabrina Jiang</author>
      <guid>http://sbrina813.github.io//javascript/2015/09/06/Closure</guid>
      <description>&lt;p&gt;&lt;a href=&quot;http://javascriptissexy.com/understand-javascript-closures-with-ease/&quot;&gt;Extract from javascriptissexy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is a closure?&lt;/strong&gt;
A closure is an inner function that has access to the outer (enclosing) function’s variables—scope chain. The closure has three scope chains: it has access to its own scope (variables defined between its curly brackets), it has access to the outer function’s variables, and it has access to the global variables.&lt;/p&gt;

&lt;p&gt;The inner function has access not only to the outer function’s &lt;code&gt;variables&lt;/code&gt;, but also to the outer function’s &lt;code&gt;parameters&lt;/code&gt;. Note that the inner function cannot call the outer function’s arguments object, however, even though it can call the outer function’s parameters directly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function showName (firstName, lastName) {
var nameIntro = &quot;Your name is &quot;;
    // this inner function has access to the outer function&#39;s variables, including the parameter
function makeFullName () {       
return nameIntro + firstName + &quot; &quot; + lastName;    
}
return makeFullName ();
}
showName (&quot;Michael&quot;, &quot;Jackson&quot;); // Your name is Michael Jackson
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Closures are used extensively in Node.js; they are workhorses in Node.js’ asynchronous, non-blocking architecture. Closures are also frequently used in jQuery and just about every piece of JavaScript code you read.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(function() {

var selections = []; 
$(&quot;.niners&quot;).click(function() { // this closure has access to the selections variable​
selections.push (this.prop(&quot;name&quot;)); // update the selections variable in the outer function&#39;s scope​
});

});
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Closures’ Rules and Side Effects&lt;/strong&gt;
&lt;em&gt;Closures have access to the outer function’s variable even after the outer function returns:&lt;/em&gt;
When functions in JavaScript execute, they use the same scope chain that was in effect when they were created. This means that even after the outer function has returned, the inner function still has access to the outer function’s variables. Therefore, &lt;code&gt;you can call the inner function later&lt;/code&gt; in your program. This example demonstrates:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; function celebrityName (firstName) {
     var nameIntro = &quot;This celebrity is &quot;;
     // this inner function has access to the outer function&#39;s variables, including the parameter​
    function lastName (theLastName) {
         return nameIntro + firstName + &quot; &quot; + theLastName;
     }
     return lastName;
 }
    
 var mjName = celebrityName (&quot;Michael&quot;); // At this juncture, the celebrityName outer function has returned.
    
 // The closure (lastName) is called here after the outer function has returned above
 // Yet, the closure still has access to the outer function&#39;s variables and parameter
 mjName (&quot;Jackson&quot;); // This celebrity is Michael Jackson    
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Closures store references to the outer function’s variables;&lt;/strong&gt; they do not store the actual value.  Closures get more interesting when the value of the outer function’s variable changes before the closure is called. And this powerful feature can be harnessed in creative ways, such as this private variables example first demonstrated by Douglas Crockford: &lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; function celebrityID () {
     var celebrityID = 999;
     // We are returning an object with some inner functions
     // All the inner functions have access to the outer function&#39;s variables
     return {
         getID: function ()  {
             // This inner function will return the UPDATED celebrityID variable
             // It will return the current value of celebrityID, even after the changeTheID function changes it
           return celebrityID;
         },
         setID: function (theNewID)  {
             // This inner function will change the outer function&#39;s variable anytime​
             celebrityID = theNewID;
         }
     }
    
 }
    
 var mjID = celebrityID (); // At this juncture, the celebrityID outer function has returned.
 mjID.getID(); // 999
 mjID.setID(567); // Changes the outer function&#39;s variable
 mjID.getID(); // 567: It returns the updated celebrityId variable
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Closures Gone Awry&lt;/strong&gt;
Because closures have access to the updated values of the outer function’s variables, they can also lead to bugs when the outer function’s variable changes with a for loop. Thus:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; // This example is explained in detail below (just after this code box).
 function celebrityIDCreator (theCelebrities) {
     var i;
     var uniqueID = 100;
     for (i = 0; i &amp;lt; theCelebrities.length; i++) {
       theCelebrities[i][&quot;id&quot;] = function ()  {
         return uniqueID + i;
       }
     }
        
     return theCelebrities;
 }
    
 var actionCelebs = [{name:&quot;Stallone&quot;, id:0}, {name:&quot;Cruise&quot;, id:0}, {name:&quot;Willis&quot;, id:0}];
    
 var createIdForActionCelebs = celebrityIDCreator (actionCelebs);
    
 var stalloneID = createIdForActionCelebs [0];console.log(stalloneID.id()); // 103
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the preceding example, by the time the anonymous functions are called, the value of i is 3 (the length of the array and then it increments). The number 3 was added to the uniqueID to create 103 for ALL the celebritiesID. So every position in the returned array get id = 103, instead of the intended 100, 101, 102.&lt;/p&gt;

&lt;p&gt;The reason this happened was because, as we have discussed in the previous example, the closure (the anonymous function in this example) has access to the outer function’s variables by reference, not by value. So just as the previous example showed that we can access the updated variable with the closure, this example similarly accessed the i variable when it was changed, since the outer function runs the entire for loop and returns the last value of i, which is 103&lt;/p&gt;

&lt;p&gt;To fix this side effect (bug) in closures, you can use an &lt;strong&gt;Immediately Invoked Function Expression (IIFE)&lt;/strong&gt;, such as the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function celebrityIDCreator (theCelebrities) {
    var i;
    var uniqueID = 100;
    for (i = 0; i &amp;lt; theCelebrities.length; i++) {
        theCelebrities[i][&quot;id&quot;] = function (j)  { // the j parametric variable is the i passed in on invocation of this IIFE​
            return function () {
                return uniqueID + j; // each iteration of the for loop passes the current value of i into this IIFE and it saves the correct value to the array​
            } () // BY adding () at the end of this function, we are executing it immediately and returning just the value of uniqueID + j, instead of returning a function.
        } (i); // immediately invoke the function passing the i variable as a parameter
    }
    return theCelebrities;
}
var actionCelebs = [{name:&quot;Stallone&quot;, id:0}, {name:&quot;Cruise&quot;, id:0}, {name:&quot;Willis&quot;, id:0}];
var createIdForActionCelebs = celebrityIDCreator (actionCelebs);
var stalloneID = createIdForActionCelebs [0];
console.log(stalloneID.id); // 100
var cruiseID = createIdForActionCelebs [1];
console.log(cruiseID.id); // 101
&lt;/code&gt;&lt;/pre&gt;

</description>
    </item>
    
    <item>
      <title>Understand JavaScript Callback Functions and Use Them</title>
      <link>http://sbrina813.github.io//javascript/2015/09/04/callback.html</link>
      <pubDate>04 Sep 2015</pubDate>
      <author>Sabrina Jiang</author>
      <guid>http://sbrina813.github.io//javascript/2015/09/04/callback</guid>
      <description>&lt;h3 id=&quot;learn-javascript-higher-order-functions-aka-callback-functionsby-richard-bovell1&quot;&gt;(Learn JavaScript Higher-order Functions, aka Callback Functions)by &lt;a href=&quot;http://javascriptissexy.com/understand-javascript-callback-functions-and-use-them/&quot;&gt;Richard Bovell&lt;/a&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;In JavaScript, functions are first-class objects; that is, functions are of the type Object and they can be used in a first-class manner like any other object (String, Array, Number, etc.) since they are in fact objects themselves. They can be “stored in variables, passed as arguments to functions, created within functions, and returned from functions”&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Because functions are first-class objects, we can pass a function as
an argument in another function and later execute that passed-in
function or even return it to be executed later. This is the essence
of using callback functions in JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the rest of this article we will learn everything about JavaScript callback functions. Callback functions are probably the most widely used functional programming technique in JavaScript, and you can find them in just about every piece of JavaScript and jQuery code, yet they remain mysterious to many JavaScript developers. The mystery will be no more, by the time you finish reading this article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Callback functions are derived from a programming paradigm known as functional programming. At a fundamental level, functional programming specifies the use of functions as arguments.&lt;/strong&gt; Functional programming was—and still is, though to a much lesser extent today—seen as an esoteric technique of specially trained, master programmers.&lt;/p&gt;

&lt;p&gt;Fortunately, the techniques of functional programming have been elucidated so that mere mortals like you and me can understand and use them with ease. One of the chief techniques in functional programming happens to be callback functions. As you will read shortly, implementing callback functions is as easy as passing regular variables as arguments. This technique is so simple that I wonder why it is mostly covered in advanced JavaScript topics.&lt;/p&gt;

&lt;h3 id=&quot;what-is-a-callback-or-higher-order-function&quot;&gt;What is a Callback or Higher-order Function?&lt;/h3&gt;

&lt;p&gt;A callback function, also known as a higher-order function, is a function that is passed to another function (let’s call this other function “otherFunction”) as a parameter, and the callback function is called (or executed) inside the otherFunction. A callback function is essentially a pattern (an established solution to a common problem), and therefore, the use of a callback function is also known as a callback pattern.&lt;/p&gt;

&lt;p&gt;Consider this common use of a callback function in jQuery:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//Note that the item in the click method&#39;s parameter is a function, not a variable.​
//The item is a callback function
$(&quot;#btn_1&quot;).click(function() {
  alert(&quot;Btn 1 Clicked&quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you see in the preceding example, we pass a function as a parameter to the click method. And the click method will call (or execute) the callback function we passed to it. This example illustrates a typical use of callback functions in JavaScript, and one widely used in jQuery.&lt;/p&gt;

&lt;p&gt;Ruminate on this other classic example of callback functions in basic JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var friends = [&quot;Mike&quot;, &quot;Stacy&quot;, &quot;Andy&quot;, &quot;Rick&quot;];
friends.forEach(function (eachName, index){
console.log(index + 1 + &quot;. &quot; + eachName); // 1. Mike, 2. Stacy, 3. Andy, 4. Rick​
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, note the way we pass an anonymous function (a function without a name) to the forEach method as a parameter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So far we have passed anonymous functions as a parameter to other functions or methods.&lt;/strong&gt; Lets now understand how callbacks work before we look at more concrete examples and start making our own callback functions.
###How Callback Functions Work?
We can pass functions around like variables and return them in functions and use them in other functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When we pass a callback function as an argument to another function, we are only passing the function definition. We are not executing the function in the parameter. In other words, we aren’t passing the function with the trailing pair of executing parenthesis () like we do when we are executing a function.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And since the containing function has the callback function in its parameter as a function definition, it can execute the callback anytime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note that the callback function is not executed immediately.&lt;/strong&gt; It is “called back” (hence the name) at some specified point inside the containing function’s body. So, even though the first jQuery example looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//The anonymous function is not being executed there in the parameter. 
//The item is a callback function
$(&quot;#btn_1&quot;).click(function() {
  alert(&quot;Btn 1 Clicked&quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the anonymous function will be called later inside the function body. &lt;em&gt;Even without a name, it can still be accessed later via the arguments object by the containing function.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Callback Functions Are Closures&lt;/strong&gt;
&lt;em&gt;When we pass a callback function as an argument to another function, the callback is executed at some point inside the containing function’s body just as if the callback were defined in the containing function.&lt;/em&gt; This means the callback is a closure. Read my post, Understand JavaScript Closures With Ease for more on closures. As we know, &lt;strong&gt;closures have access to the containing function’s scope, so the callback function can access the containing functions’ variables, and even the variables from the global scope.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;basic-principles-when-implementing-callback-functions&quot;&gt;Basic Principles when Implementing Callback Functions&lt;/h3&gt;
&lt;p&gt;While uncomplicated, callback functions have a few noteworthy principles we should be familiar with when implementing them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use Named OR Anonymous Functions as Callbacks&lt;/strong&gt;
In the earlier jQuery and forEach examples, we used anonymous functions that were defined in the parameter of the containing function. That is one of the common patterns for using callback functions. Another popular pattern is to declare a named function and pass the name of that function to the parameter. Consider this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// global variable​
​var allUserData = [];
​
​// generic logStuff function that prints to console​
​function logStuff (userData) {
	if ( typeof userData === &quot;string&quot;)
	{
		console.log(userData);
	}
	else if ( typeof userData === &quot;object&quot;)
	{
		for (var item in userData) {
			console.log(item + &quot;: &quot; + userData[item]);
		}
​
	}
​
}
​
​// A function that takes two parameters, the last one a callback function​
​function getInput (options, callback) {
	allUserData.push (options);
	callback (options);
​
}
​
​// When we call the getInput function, we pass logStuff as a parameter.​
​// So logStuff will be the function that will called back (or executed) inside the getInput function​
getInput ({name:&quot;Rich&quot;, speciality:&quot;JavaScript&quot;}, logStuff);
​//  name: Rich​
​// speciality: JavaScript
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Pass Parameters to Callback Functions&lt;/strong&gt;
Since the callback function is just a normal function when it is executed, we can pass parameters to it. We can pass any of the containing function’s properties (or global properties) as parameters to the callback function. In the preceding example, we pass options as a parameter to the callback function. Let’s pass a global variable and a local variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//Global variable​
​var generalLastName = &quot;Clinton&quot;;
​
​function getInput (options, callback) {
	allUserData.push (options);
​// Pass the global variable generalLastName to the callback function​
	callback (generalLastName, options);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Make Sure Callback is a Function Before Executing It&lt;/strong&gt;
It is always wise to check that the callback function passed in the parameter is indeed a function before calling it. Also, it is good practice to make the callback function optional.&lt;/p&gt;

&lt;p&gt;Let’s &lt;strong&gt;refactor&lt;/strong&gt; the getInput function from the previous example to ensure these checks are in place.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function getInput(options, callback) {
	allUserData.push(options);
​
	// Make sure the callback is a function​
	if (typeof callback === &quot;function&quot;) {
	// Call it, since we have confirmed it is callable​
		callback(options);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without the check in place, if the getInput function is called either without the callback function as a parameter or in place of a function a non-function is passed, our code will result in a runtime error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem When Using Methods With The this Object as Callbacks&lt;/strong&gt;
When the callback function is a method that uses the this object, we have to modify how we execute the callback function to preserve the this object context. Or else the this object will either point to the global window object (in the browser), if callback was passed to a global function. Or it will point to the object of the containing method.
Let’s explore this in code: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Define an object with some properties and a method​
​// We will later pass the method as a callback function to another function​
​var clientData = {
	id: 094545,
	fullName: &quot;Not Set&quot;,
	// setUserName is a method on the clientData object​
	setUserName: function (firstName, lastName)  {
		// this refers to the fullName property in this object​
	  this.fullName = firstName + &quot; &quot; + lastName;
	}
}
​
​function getUserInput(firstName, lastName, callback)  {
	// Do other stuff to validate firstName/lastName here​
​
	// Now save the names​
	callback (firstName, lastName);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;In the following code example, when clientData.setUserName is executed, this.fullName will not set the fullName property on the clientData object. Instead, it will set fullName on the window object, since getUserInput is a global function. This happens because the this object in the global function points to the window object.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;getUserInput (&quot;Barack&quot;, &quot;Obama&quot;, clientData.setUserName);
​
console.log (clientData.fullName);// Not Set​
​
​// The fullName property was initialized on the window object​
console.log (window.fullName); // Barack Obama
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Use the Call or Apply Function To Preserve this&lt;/strong&gt;
We can fix the preceding problem &lt;strong&gt;by using the Call or Apply function&lt;/strong&gt; (we will discuss these in a full blog post later). For now, know that every function in JavaScript has two methods: Call and Apply. And these methods are used to set the this object inside the function and to pass arguments to the functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Call&lt;/strong&gt; takes the value to be used &lt;strong&gt;as the this object&lt;/strong&gt; inside the function as the &lt;strong&gt;first parameter&lt;/strong&gt;, and the &lt;strong&gt;remaining arguments&lt;/strong&gt; to be passed to the function are &lt;strong&gt;passed individually&lt;/strong&gt; (&lt;strong&gt;separated by commas&lt;/strong&gt; of course). The &lt;strong&gt;Apply&lt;/strong&gt; function’s &lt;strong&gt;first parameter&lt;/strong&gt; is also the value to be used as the &lt;strong&gt;this object&lt;/strong&gt; inside the function, while the &lt;strong&gt;last parameter&lt;/strong&gt; is an &lt;strong&gt;array of values&lt;/strong&gt; (or the arguments object) to pass to the function.&lt;/p&gt;

&lt;p&gt;This sounds complex, but lets see how easy it is to use Apply or Call. To fix the problem in the previous example, we will use the Apply function thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//Note that we have added an extra parameter for the callback object, called &quot;callbackObj&quot;​
​function getUserInput(firstName, lastName, callback, callbackObj)  {
	// Do other stuff to validate name here​
​
	// The use of the Apply function below will set the this object to be callbackObj​
	callback.apply (callbackObj, [firstName, lastName]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the &lt;strong&gt;Apply&lt;/strong&gt; function setting the this object correctly, we can now correctly execute the callback and have it set the fullName property correctly on the clientData object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// We pass the clientData.setUserName method and the clientData object as parameters. The clientData object will be used by the Apply function to set the this object​
 getUserInput (&quot;Barack&quot;, &quot;Obama&quot;, clientData.setUserName, clientData);
​
​// the fullName property on the clientData was correctly set​
console.log (clientData.fullName); // Barack Obama
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We would have also used the Call function, but in this case we used the Apply function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multiple Callback Functions Allowed&lt;/strong&gt;
We can pass more than one callback functions into the parameter of a function, just like we can pass more than one variable. Here is a classic example with jQuery’s AJAX function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function successCallback() {
	// Do stuff before send​
}
​
​function successCallback() {
	// Do stuff if success message received​
}
​
​function completeCallback() {
	// Do stuff upon completion​
}
​
​function errorCallback() {
	// Do stuff if error received​
}
​
$.ajax({
	url:&quot;http://fiddle.jshell.net/favicon.png&quot;,
	success:successCallback,
	complete:completeCallback,
	error:errorCallback
​
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;callback-hell-problem-and-solution&quot;&gt;“Callback Hell” Problem And Solution&lt;/h3&gt;
&lt;p&gt;In asynchronous code execution, which is simply execution of code in any order, sometimes it is common to have numerous levels of callback functions to the extent that you have code that looks like the following. &lt;strong&gt;The messy code below is called callback hell because of the difficulty of following the code due to the many callbacks.&lt;/strong&gt; I took this example from the node-mongodb-native, a MongoDB driver for Node.js. [2]. The example code below is just for demonstration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var p_client = new Db(&#39;integration_tests_20&#39;, new Server(&quot;127.0.0.1&quot;, 27017, {}), {&#39;pk&#39;:CustomPKFactory});
p_client.open(function(err, p_client) {
	p_client.dropDatabase(function(err, done) {
		p_client.createCollection(&#39;test_custom_key&#39;, function(err, collection) {
			collection.insert({&#39;a&#39;:1}, function(err, docs) {
				collection.find({&#39;_id&#39;:new ObjectID(&quot;aaaaaaaaaaaa&quot;)}, function(err, cursor) {
					cursor.toArray(function(err, items) {
						test.assertEquals(1, items.length);
​
						// Let&#39;s close the db​
						p_client.close();
					});
				});
			});
		});
	});
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are not likely to encounter this problem often in your code, but when you do—and you will from time to time—here are two solutions to this problem. [3]&lt;/p&gt;

&lt;p&gt;Name your functions and declare them and pass just the name of the function as the callback, instead of defining an anonymous function in the parameter of the main function.
Modularity: Separate your code into modules, so you can export a section of code that does a particular job. Then you can import that module into your larger application.
###Make Your Own Callback Functions
Now that you completely (I think you do; if not it is a quick reread :)) understand everything about JavaScript callback functions and you have seen that using callback functions are rather simple yet powerful, you should look at your own code for opportunities to use callback functions, for they will allow you to:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Do not repeat code (DRY—Do Not Repeat Yourself)&lt;/li&gt;
    &lt;li&gt;Implement better abstraction where you can have more generic functions that  are versatile (can handle all sorts of functionalities)&lt;/li&gt;
    &lt;li&gt;Have better maintainability&lt;/li&gt;
    &lt;li&gt;Have more readable code&lt;/li&gt;
    &lt;li&gt;Have more specialized functions.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is rather easy to make your own callback functions. In the following example, I could have created one function to do all the work: retrieve the user data, create a generic poem with the data, and greet the user. This would have been a messy function with much if/else statements and, even still, it would have been very limited and incapable of carrying out other functionalities the application might need with the user data.&lt;/p&gt;

&lt;p&gt;Instead, I left the implementation for added functionality up to the callback functions, so that the main function that retrieves the user data can perform virtually any task with the user data by simply passing the user’s full name and gender as parameters to the callback function and then executing the callback function.&lt;/p&gt;

&lt;p&gt;In short, the getUserInput function is versatile: it can execute all sorts of callback functions with myriad of functionalities.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// First, setup the generic poem creator function; it will be the callback function in the getUserInput function below.​
​function genericPoemMaker(name, gender) {
	console.log(name + &quot; is finer than fine wine.&quot;);
	console.log(&quot;Altruistic and noble for the modern time.&quot;);
	console.log(&quot;Always admirably adorned with the latest style.&quot;);
	console.log(&quot;A &quot; + gender + &quot; of unfortunate tragedies who still manages a perpetual smile&quot;);
}
​
​//The callback, which is the last item in the parameter, will be our genericPoemMaker function we defined above.​
​function getUserInput(firstName, lastName, gender, callback) {
	var fullName = firstName + &quot; &quot; + lastName;
​
	// Make sure the callback is a function​
	if (typeof callback === &quot;function&quot;) {
	// Execute the callback function and pass the parameters to it​
	callback(fullName, gender);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Call the getUserInput function and pass the genericPoemMaker function as a callback:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;getUserInput(&quot;Michael&quot;, &quot;Fassbender&quot;, &quot;Man&quot;, genericPoemMaker);
​// Output​
​/* Michael Fassbender is finer than fine wine.
Altruistic and noble for the modern time.
Always admirably adorned with the latest style.
A Man of unfortunate tragedies who still manages a perpetual smile.
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the getUserInput function is only handling the retrieving of data, we can pass any callback to it. For example, we can pass a greetUser function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function greetUser(customerName, sex)  {
   var salutation  = sex &amp;amp;&amp;amp; sex === &quot;Man&quot; ? &quot;Mr.&quot; : &quot;Ms.&quot;;
  console.log(&quot;Hello, &quot; + salutation + &quot; &quot; + customerName);
}
​
​// Pass the greetUser function as a callback to getUserInput​
​getUserInput(&quot;Bill&quot;, &quot;Gates&quot;, &quot;Man&quot;, greetUser);
​
​// And this is the output​
Hello, Mr. Bill Gates
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We called the same getUserInput function as we did before, but this time it performed a completely different task.&lt;/p&gt;

&lt;p&gt;As you see, callback functions afford much versatility. And even though the preceding example is relatively simple, imagine how much work you can save yourself and how well abstracted your code will be if you start using callback functions. Go for it. Do it in the monings; do it in the evenings; do it when you are down; do it when you are k&lt;/p&gt;

&lt;p&gt;Note the following ways we frequently use callback functions in JavaScript, especially in modern web application development, in libraries, and in frameworks: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For asynchronous execution (such as reading files, and making HTTP requests)&lt;/li&gt;
  &lt;li&gt;In Event Listeners/Handlers&lt;/li&gt;
  &lt;li&gt;In setTimeout and setInterval methods&lt;/li&gt;
  &lt;li&gt;For Generalization: code conciseness&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;final-words&quot;&gt;Final Words&lt;/h3&gt;

&lt;p&gt;JavaScript callback functions are wonderful and powerful to use and they provide great benefits to your web applications and code. You should use them when the need arises; look for ways to refactor your code for Abstraction, Maintainability, and Readability with callback functions.&lt;/p&gt;

&lt;p&gt;See you next time, and remember to keep coming back because JavaScriptIsSexy.com has much to teach you and you have much to learn.&lt;/p&gt;

</description>
    </item>
    
    <item>
      <title>HTML5 material</title>
      <link>http://sbrina813.github.io//front_end/2015/08/04/interview-notes.html</link>
      <pubDate>04 Aug 2015</pubDate>
      <author>Sabrina Jiang</author>
      <guid>http://sbrina813.github.io//front_end/2015/08/04/interview-notes</guid>
      <description>&lt;p&gt;New features in HTML5
HTML 5 New Doctype and Charset
HTML 5 New Structure &amp;lt;section&amp;gt;，&amp;lt;article&amp;gt;，&amp;lt;nav&amp;gt;，&amp;lt;header&amp;gt;，&amp;lt;footer&amp;gt;，&amp;lt;aside&amp;gt;&lt;/p&gt;

&lt;p&gt;HTML 5 New Inline Elements
These inline elements define some basic concepts and keep them semantically marked up, mostly to do with time:&lt;mark&gt; &lt;figure&gt; &amp;lt;figcaption&amp;gt; &lt;time&gt; &lt;progress&gt; &lt;meter&gt;。&lt;/meter&gt;&lt;/progress&gt;&lt;/time&gt;&lt;/figure&gt;&lt;/mark&gt;&lt;/p&gt;

&lt;p&gt;HTML 5 New Form Types: datetime,datetime-local,date,month,week,time,number,range,email,url
新增的表单元素：&lt;/p&gt;
&lt;datalist&gt;:定义下拉列表，和&lt;option&gt;配合使用。
&lt;keygen /&gt;:密钥对生成器。
&lt;output&gt;:output 元素用于不同类型的输出，比如计算或脚本输出。
新增的form标签属性：
autocomplete属性（自动完成）和novalidate属性（规定在提交表单时不应该验证 form 或 input 域）

HTML 5 New Dynamic Pages Support
Context menus 
href 
async attribute 
&lt;details&gt; 
&lt;datagrid&gt; 
&lt;menu&gt; 
&lt;command /&gt;

HTML 5 New Elements &lt;canvas&gt; &lt;video&gt; &lt;audio&gt;

HTML 5 Removes Some Elements
acronym
applet
basefont
big
center
dir
font
frame
frameset
isindex
noframes
noscript
s
strike
tt
u

&lt;/audio&gt;&lt;/video&gt;&lt;/canvas&gt;&lt;/menu&gt;&lt;/datagrid&gt;&lt;/details&gt;&lt;/output&gt;&lt;/option&gt;&lt;/datalist&gt;
</description>
    </item>
    
    <item>
      <title>Aha, this is my first blog</title>
      <link>http://sbrina813.github.io//interests/2015/07/10/first-blog.html</link>
      <pubDate>10 Jul 2015</pubDate>
      <author>Sabrina Jiang</author>
      <guid>http://sbrina813.github.io//interests/2015/07/10/first-blog</guid>
      <description>&lt;h3 id=&quot;section&quot;&gt;以下功能还需要修改一下下&lt;/h3&gt;

&lt;h3 id=&quot;section-1&quot;&gt;搜索功能&lt;/h3&gt;

&lt;p&gt;搜索框目前只是摆设，请使用 &lt;a href=&quot;https://www.google.com/cse/&quot;&gt;Google Custom Search Engine&lt;/a&gt; 或 &lt;a href=&quot;https://github.com/slashdotdash/jekyll-lunr-js-search&quot;&gt;jekyll-lunr-js-search&lt;/a&gt; 插件。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;修改邮箱&lt;/h3&gt;

&lt;p&gt;通过 &lt;a href=&quot;http://www.safeemail.org/&quot;&gt;Stop Link Spam Bots&lt;/a&gt; 编辑了邮箱地址，希望能防 spam。&lt;/p&gt;

&lt;h3 id=&quot;embedding-codepen&quot;&gt;Embedding Codepen&lt;/h3&gt;

&lt;p&gt;如果需要插入 Codepen，只需将 embed code 中的 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 部分粘贴在正文中，而不必粘贴 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 部分。更多关于插入 Codepen 的解释请查看 http://blog.codepen.io/documentation/features/how-do-i-embed-a-pen-on-another-site/ 。&lt;/p&gt;

&lt;p&gt;如果完全不需要这个功能可以将 &lt;code&gt;/assets/js/script.js&lt;/code&gt; 中的相关代码删除。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;修改分享链接地址&lt;/h3&gt;

&lt;p&gt;打开 &lt;code&gt;/_layouts/post.html&lt;/code&gt; 将分享链接中的 &lt;code&gt;place_your_url_here&lt;/code&gt; 提换成博客地址。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;修改许可协议&lt;/h3&gt;

&lt;p&gt;在 &lt;code&gt;/_layouts/post.html&lt;/code&gt; 文件的分享链接部分声明博客内容所使用的许可协议，默认使用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/&quot;&gt;Attribution-NonCommercial-ShareAlike 3.0 Unported&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;rss&quot;&gt;设置 RSS&lt;/h3&gt;

&lt;p&gt;请不要忘记编辑 &lt;code&gt;rss.xml&lt;/code&gt; 文件，语言可填 &lt;code&gt;zh-cn&lt;/code&gt; 或 &lt;code&gt;zh-tw&lt;/code&gt;。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
      </div> <!-- end #pjax -->

      <div id="post__toc-trigger">
        <div id="post__toc">
          <span id="post__toc-title">Table of Contents</span>
          <ul id="post__toc-ul"></ul>
        </div>
      </div>
    </div> <!-- end #post -->

    <button id="js-fullscreen"><span id="icon-arrow" class="fontello"></span></button>
    <script src="/assets/js/jquery-2.0.3.min.js"></script>
    <script src="/assets/js/jquery.pjax.js"></script>
    <script src="/assets/js/nprogress.js"></script>
    <script src="/assets/js/script.js"></script>
    <script src="/assects/js/jekyll-search.js"></script>   
<script src="/prettify/prettify.js"></script>
<script type="text/javascript">
 	 $(function(){
   	 $("pre").addClass("prettyprint linenums");
	prettyPrint();
  	});
</script>
  </body>
</html>